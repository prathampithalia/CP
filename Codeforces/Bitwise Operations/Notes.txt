0 & 0 == 0   ==   0 == 0 ^ 0
0 & 1 == 0   <    1 == 0 ^ 1
1 & 0 == 0   <    1 == 1 ^ 0
1 & 1 == 1   >    0 == 1 & 1

    A = 010011110
    B = 111001111

A & B = 010001110
A ^ B = 101010001

    A = 110011110
    B = 111001111

A & B = 110001110
A ^ B = 001010001

(A & B) >= (A ^ B) if and only if A's and B's highest bits match


--> (x << b is equal to x⋅(2pow(b)) )


----------------------------------------------------------------------------------------------

Let pi be the i-th bit of x ,qi be the i-th bit of y  (both indexed from 0 ).

x and y>0⇔∃i, pi=qi=1.
x xor y>0⇔∃i, pi≠qi.

To satisfy the first condition, find the minimum integer k satisfying 

     •pk=1 , and assign 1 to qk.

If x≠2k , the second condition is satisfied now. Otherwise, 

     • find the minimum integer j satisfying pj=0 , and assign 1 to qj .

The time complexity is O(1)

----------------------------------------------------------------------------------------------

bitset<8>(x) : prints number x in bits of size 8 

ex : 
bitset<8>(5) : 00000101

bitset<64>(50) : 0000000000000000000000000000000000000000000000000000000000110010



k≥0 , (4k)⊕(4k+1)⊕(4k+2)⊕(4k+3)=0

Remember x⊕x=0 and a⊕b=c↔a=b⊕c
(you can move an element from one side to the other side).

Let's define your answer A . Your answer must satisfy:
A1⊕A3⊕⋯=A2⊕A4⊕…

<-> A1⊕A2⊕A3⊕A4⊕⋯=0
<-> (XOR of elements you choose) = (XOR of the remaining elements)


[1] Take n−1 distinct integers from [0,231) and name the set S

[2] Let's define the XOR of n−1 elements x . If S doesn't contain x,add x
    to S and S will be the answer 
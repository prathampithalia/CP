class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {

        int n = nums.size();
        int tot = 0;
        for (auto i : nums)
            tot += i;

        int s1 = (tot - target );

        if ((s1 & 1) || tot - target < 0 )
            return 0;

        s1 = s1/2;
        vector<vector<int>> dp(n, vector<int>(s1 + 1, 0));

        for (int i = 0; i < n; i++)
            dp[i][0] = 1;
        if (nums[0] == 0)
            dp[0][0] = 2; 
        else {
            dp[0][0] = 1;
            if (nums[0] <= s1)
                dp[0][nums[0]] = 1;
        }

        for (int i = 1; i < n; i++) {
            for (int j = 0; j <= s1; j++) {
                int no = dp[i - 1][j];
                int yes = 0;
                if (nums[i] <= j)
                    yes = dp[i - 1][j - nums[i]];
                dp[i][j] = no + yes;
            }
        }
        return dp[n - 1][s1];
    }
};